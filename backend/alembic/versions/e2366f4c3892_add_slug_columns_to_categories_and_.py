"""Add slug columns to categories and payees

Revision ID: e2366f4c3892
Revises: d66a5b82f2ce
Create Date: 2025-08-01 15:58:34.716026

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e2366f4c3892'
down_revision = 'd66a5b82f2ce'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Add slug columns as nullable first
    op.add_column('categories', sa.Column('slug', sa.String(length=100), nullable=True))
    op.add_column('payees', sa.Column('slug', sa.String(length=255), nullable=True))
    
    # Populate slug values for existing records
    # Import necessary modules for the update
    import re
    import unicodedata
    from sqlalchemy import text
    
    def create_slug_sql(text_value):
        """Create a slug using SQL-compatible logic"""
        if not text_value:
            return ""
        
        # Convert to lowercase and replace common characters
        slug = text_value.lower()
        slug = slug.replace('&', 'and').replace('@', 'at').replace('+', 'plus')
        slug = re.sub(r'[^a-z0-9\s\-]', '', slug)
        slug = re.sub(r'[\s\-]+', '-', slug)
        slug = slug.strip('-')[:100].rstrip('-')
        return slug or 'unnamed'
    
    # Get connection to execute raw SQL
    connection = op.get_bind()
    
    # Update categories with slugs
    categories = connection.execute(text("SELECT id, name FROM categories")).fetchall()
    for category in categories:
        slug = create_slug_sql(category.name)
        connection.execute(
            text("UPDATE categories SET slug = :slug WHERE id = :id"),
            {"slug": slug, "id": category.id}
        )
    
    # Update payees with slugs  
    payees = connection.execute(text("SELECT id, name FROM payees")).fetchall()
    for payee in payees:
        slug = create_slug_sql(payee.name)
        connection.execute(
            text("UPDATE payees SET slug = :slug WHERE id = :id"),
            {"slug": slug, "id": payee.id}
        )
    
    # Now make the columns NOT NULL
    op.alter_column('categories', 'slug', nullable=False)
    op.alter_column('payees', 'slug', nullable=False)
    
    # Create indexes
    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=False)
    op.create_index(op.f('ix_payees_slug'), 'payees', ['slug'], unique=False)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_payees_slug'), table_name='payees')
    op.drop_column('payees', 'slug')
    op.drop_index(op.f('ix_categories_slug'), table_name='categories')
    op.drop_column('categories', 'slug')
    # ### end Alembic commands ###